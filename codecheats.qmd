# Custom Callouts

# Early Section Topic {#sec-early-topic}

## built-in callout blocks:

::: { .callout-caution }
The caution callout

```markdown
::: { .callout-caution }
The caution callout
:::
```
:::

::: { .callout-important }
The important callout

```markdown
::: { .callout-info }
The important callout
:::
```
:::

::: { .callout-tip }
The tip callout

```markdown
::: { .callout-tip }
The tip callout
:::
```
:::

but these do not cover all the cases we might want to use callouts for. It is possible to change the titles of these callouts, such as:

::: { .callout-tip title="Custom title"}
The tip callout with a custom title

```markdown
::: { .callout-tip title="Custom title"}
The tip callout with a custom title
:::
```
:::

::: { .callout-caution }
## Not the caution callout

```markdown
::: { .callout-caution }
## Not the caution callout
:::
```
:::

but customising the colour and icon of a callout is more difficult. The `quarto-custom-callout` extension allows us to make our own callouts.

## Custom callouts in this template

We have defined the custom callouts below:

::: { .callout-case-study }
For describing case studies
:::

::: { .callout-challenge }
For presenting a challenge to readers
:::

::: { .callout-data }
For describing datasets and data analysis
:::

::: { .callout-discussion }
For introducing discussion points
:::

::: { .callout-microbe }
For summarising the properties of a microbe
:::

::: { .callout-question }
For presenting a single question to readers
:::

::: { .callout-questions }
For presenting multiple questions to readers
:::


::: { .callout-thumbs-up }
For general encouragement
:::

::: { .callout-todo }
For highlighting where we still need to do some work
:::


# Interactive Multiple Choice Questions

This page demonstrates the setup of an [`naquiz` multiple-choice quiz](https://nareal.github.io/naquiz/example.html). The advantage of this extension is that we don't need to use a Shiny server.

- [`naquiz` repository](https://github.com/nareal/naquiz)
- [`naquiz` examples and documentation](https://nareal.github.io/naquiz/example.html)

## Multiple Choice Questions

### Basic MCQ

A simple `naquiz` example looks something like the question below to the reader (click the `Markdown` tab to see how to write the markdown for it).

::: { .panel-tabset }
## Appearance

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

::::
:::::

## Markdown

```markdown
:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

::::
:::::

```

::: { .callout-caution }
The nested colon dividers and their counts can look confusing on the page, and missed/extra colons can break the layout of your page.

- The `{.question}` divider gets **five** colons.
- The `{.choices}` divider that surrounds the choices presented to the reader gets **four** colons.
- Each individual `{.choice}` divider gets **three** colons.
:::

:::

It presents a series of _radio buttons_ from which the reader can choose one option. On clicking the option, the reader receives very basic feedback: a red cross (incorrect) or green tick (correct).



### Add a "clear answer" button

The `naquiz` MCQs can be decorated with useful buttons for reader interaction. The example below has a "Clear Answer" button, which unchecks the reader's selected answer.

::: { .panel-tabset }
## Appearance

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::

## Markdown

```markdown
:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::
```

::: { .callout-important }
The button to clear reader answers needs to be linked with the available choices, and so is placed **inside the `{.choices}` division** of the MCQ.
:::

:::

### Add a "hint" button

The example below includes a "hint" button, which the reader can use to get a clue to the answer.

::: { .panel-tabset }
## Appearance

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::
::::

:::::

## Markdown

```markdown
:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::
::::

:::::
```

::: { .callout-important }
We can place additional buttons within a _button group_ divider, specified as `::::{.btn-group}`, _inside_ the question divider (the five colons `:::::`).

Here, we have linked a `{.button-hint}` that, when clicked, expands to show the hint text.
:::

:::

### Add an "answer" button

We can add a further button to provide students with the answer we'd like them to read, directly.

::: { .panel-tabset }
## Appearance

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
Bill Gates and Paul Allen founded Microsoft on April 4, 1975.
:::
::::

:::::

## Markdown

```markdown
:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::
::::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
Bill Gates and Paul Allen founded Microsoft on April 4, 1975.
:::
:::::
```

::: { .callout-important }
We can place more than one button in the _button group_ divider. Here, we have linked a `{.button-answer}` that, when clicked, expands to show the hint text.
:::

:::

### Placing an MCQ in a custom callout

We have created a custom callout called `callout-question` which can be used to make MCQ stand out a bit more, with a consistent visual style.

::: { .panel-tabset }

## Appearance

::: { .callout-question }

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
Bill Gates and Paul Allen founded Microsoft on April 4, 1975.
:::
::::

:::

## Markdown

```markdown
::: { .callout-question }

:::::{.question}
Bill Gates was the founder of:

::::{.choices}

:::{.choice}
Apple
:::  

:::{.choice .correct-choice}
Microsoft
:::

:::{.choice}
Facebook  
:::

:::{.choice}
Google   
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
The company name starts with an 'M'...
:::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
Bill Gates and Paul Allen founded Microsoft on April 4, 1975.
:::
::::

:::
```
:::

### Randomising question values

We can use `R` or `Python` to generate random values that can be used to compose questions that are different each time the page is rendered, by inserting a suitable `R`/`Python` code block and using the values in the question.

::: { .callout-caution }
The values do **not** change when the page is reloaded by a reader. The values are calculated when the pages are rendered.

For values that change when the page is refreshed, or on demand, use an `R` [Shiny](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/) or [Shinylive](https://posit-dev.github.io/r-shinylive/) solution, or a solution like [Numbas](https://www.numbas.org.uk/).
:::

```{r}
#| show: false
#| echo: false

x_val <- sample(1:10, 1)
y_val <- sample(11:20, 1)
```

::: { .panel-tabset }

## Appearance

::: { .callout-question }

:::::{.question}
What is the sum of `r x_val` and `r y_val`?

::::{.choices}

:::{.choice}
`r x_val - y_val`
:::  

:::{.choice .correct-choice}
`r x_val + y_val`
:::

:::{.choice}
`r y_val - x_val`
:::

:::{.choice}
`r y_val * x_val`
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
You need to add the two numbers `r x_val` and `r y_val`
:::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
`r x_val` + `r y_val` = `r x_val + y_val`
:::
::::

:::

## Markdown

```markdown
::: { .callout-question }

:::::{.question}
What is the sum of `r knitr::inline_expr("x_val")` and `r knitr::inline_expr("y_val")`?

::::{.choices}

:::{.choice}
`r knitr::inline_expr("x_val - y_val")`
:::  

:::{.choice .correct-choice}
`r knitr::inline_expr("x_val + y_val")`
:::

:::{.choice}
`r knitr::inline_expr("y_val - x_val")`
:::

:::{.choice}
`r knitr::inline_expr("y_val * x_val")`
:::

:::{.button-clear title="Clear answer" button-class="btn btn-xs"}
:::

::::
:::::

::::{.btn-group}
:::{.button-hint title="Show hint" button-class="btn btn-xs"}
You need to add the two numbers `r knitr::inline_expr("x_val")` and `r knitr::inline_expr("y_val")`
:::

:::{.button-answer title="Show Answer" button-class="btn btn-xs"}
`r knitr::inline_expr("x_val")` + `r knitr::inline_expr("y_val")` = `r knitr::inline_expr("x_val + y_val")`
:::
::::

:::
```

## R code

```r
#| show: false
#| echo: false

x_val <- sample(1:10, 1)
y_val <- sample(11:20, 1)
```

:::
